unit uFrm_Cadastro.Basico;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.ComCtrls, Vcl.ActnMan, Vcl.ActnCtrls, Vcl.ToolWin, System.ImageList,
  Vcl.ImgList, Vcl.PlatformDefaultStyleActnCtrls, System.Actions, Vcl.ActnList,
  Vcl.Buttons, Datasnap.DBClient, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.AppEvnts, System.Generics.Collections,
  sSkinManager;


type

  TExecutar = (sentencaSQL,exibePanels);

  Tfrm_CadastroBasico = class(TForm)
    stb_CadBasico: TStatusBar;
    ToolBar1: TToolBar;
    pgc_CadBasico: TPageControl;
    tbs_Cadastro: TTabSheet;
    tbs_Pesquisar: TTabSheet;
    img_Cadastro: TImageList;
    acl_Cadastro: TActionList;
    acl_Inserir: TAction;
    acl_Editar: TAction;
    acl_Excluir: TAction;
    acl_Gravar: TAction;
    acl_Cancelar: TAction;
    acl_Pesquisar: TAction;
    acl_Imprimir: TAction;
    acl_Fechar: TAction;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    SpeedButton3: TSpeedButton;
    SpeedButton4: TSpeedButton;
    SpeedButton5: TSpeedButton;
    SpeedButton6: TSpeedButton;
    SpeedButton7: TSpeedButton;
    SpeedButton8: TSpeedButton;
    Panel1: TPanel;
    Label2: TLabel;
    lbl_Atividade: TLabel;
    Panel3: TPanel;
    Panel4: TPanel;
    Panel2: TPanel;
    Label3: TLabel;
    cbx_Pesquisar: TComboBox;
    Label1: TLabel;
    btn_Filtrar: TButton;
    edt_Pesquisar: TEdit;
    pnl_Cadastro: TPanel;
    app_CadBasico: TApplicationEvents;
    tmr_CadBasico: TTimer;
    Panel5: TPanel;
    dbg_Dados: TDBGrid;
{    procedure acl_InserirExecute(Sender: TObject);
    procedure acl_EditarExecute(Sender: TObject);
    procedure acl_ExcluirExecute(Sender: TObject);
    procedure acl_GravarExecute(Sender: TObject);
    procedure acl_CancelarExecute(Sender: TObject);
    procedure acl_PesquisarExecute(Sender: TObject);
    procedure acl_FecharExecute(Sender: TObject);
    procedure acl_CancelarUpdate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure acl_InserirUpdate(Sender: TObject);
    procedure acl_ExcluirUpdate(Sender: TObject);
    procedure acl_EditarUpdate(Sender: TObject);
    procedure acl_GravarUpdate(Sender: TObject);
    procedure acl_ImprimirExecute(Sender: TObject);
    procedure cbx_PesquisarClick(Sender: TObject);
    procedure app_CadBasicoHint(Sender: TObject);
    procedure tmr_CadBasicoTimer(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure edt_PesquisarKeyPress(Sender: TObject; var Key: Char);

  private
    FExecutar: TExecutar;
    procedure SetExecutar(const Value: TExecutar);

    procedure DoAfterScroll(DataSet: TDataSet);
    { Private declarations }

{

    protected

    // Objeto utilizado na rotina de filtro
    FieldFilter: TField;

    // função que retorna o campo chave do DataSet CRUD
    function GetKeyFiled: String;virtual;abstract;

    //Função que retorna o nome do campo chave para filtrar o registro no DataSet de CRUD
    function GetQuerykeyFiled: String;virtual;abstract;


  public
    iModo : Integer;
    procedure LimparTudo;

    property Executar: TExecutar read FExecutar write SetExecutar;
    // Public declarations
  end;
     }
var
  frm_CadastroBasico: Tfrm_CadastroBasico;

  {guarda mensagem}
  mensagem: String;

  {armazena setença SQL atual}
  StrSqlAtual: String;

  {armazena a sentença SQL}
  strSql:  String;

  {define o nome da tabela em uso}
  nomeTabela: String;

  {armazenam datas no formato}
  valdata1,valdata2,val1,


implementation

{$R *.dfm}

{
procedure Tfrm_CadastroBasico.acl_CancelarExecute(Sender: TObject);
begin
  TClientDataSet(dsTabela.DataSet).Cancel;
  TClientDataSet(dsTabela.DataSet).Edit;
  LimparTudo;
  lbl_Atividade.Caption := 'Pesquisa no Cadastro de Dizimistas';
end;



procedure Tfrm_CadastroBasico.acl_CancelarUpdate(Sender: TObject);
begin
  acl_Cancelar.Enabled := acl_Gravar.Enabled = True;
end;



procedure Tfrm_CadastroBasico.acl_EditarExecute(Sender: TObject);
begin
  iModo := 1;
  if pgc_CadBasico.ActivePage = tbs_Pesquisar then
  begin
    tbs_Cadastro.TabVisible  := True;
    tbs_Pesquisar.TabVisible := False;
    pgc_CadBasico.ActivePage  := tbs_Cadastro;
    lbl_Atividade.Caption    := 'Alteração';
  end;
  if not TClientDataSet(dsTabela.DataSet).Active then
  TClientDataSet(dsTabela.DataSet).Open;
  TClientDataSet(dsTabela.DataSet).Edit;
 end;



procedure Tfrm_CadastroBasico.acl_EditarUpdate(Sender: TObject);
begin
  if not TClientDataSet(dsTabela.DataSet).IsEmpty then
    acl_Editar.Enabled := dsTabela.State in [dsBrowse];
end;



procedure Tfrm_CadastroBasico.acl_ExcluirExecute(Sender: TObject);
begin

  if Application.MessageBox('Deseja realmente excluir o registro?','Pergunta',MB_YESNO+MB_ICONQUESTION) = mrYes then
  begin
    try
      TClientDataSet(dsTabela.DataSet).Delete;
      TClientDataSet(dsTabela.DataSet).ApplyUpdates(0);
      Application.MessageBox('Registro excluído com sucesso!','Informação',0+64);
      TClientDataSet(dsTabela.DataSet).Open;
    except on E : Exception do
      raise Exception.Create('Erro ao excluir registro: '+E.Message);
    end;
  end;
end;



procedure Tfrm_CadastroBasico.acl_ExcluirUpdate(Sender: TObject);
begin
  if not TClientDataSet(dsTabela.DataSet).IsEmpty then
    acl_Excluir.Enabled := dsTabela.State in [dsBrowse];
end;

procedure Tfrm_CadastroBasico.acl_FecharExecute(Sender: TObject);
begin
  Close;
end;

procedure Tfrm_CadastroBasico.acl_ImprimirExecute(Sender: TObject);
begin
  ShowMessage('Em Desenvolvimento...');
end;



procedure Tfrm_CadastroBasico.acl_InserirExecute(Sender: TObject);
begin
  iModo := 0;
  if pgc_CadBasico.ActivePage = tbs_Pesquisar then
  begin
    tbs_Cadastro.TabVisible  := True;
    lbl_Atividade.Caption    := 'Inclusão ou Alterações no Cadastro de Dizimistas ';
    tbs_Pesquisar.TabVisible := False;
    pgc_CadBasico.ActivePage := tbs_Cadastro;
  end;
  if not TClientDataSet(dsTabela.DataSet).Active then
         TClientDataSet(dsTabela.DataSet).Open;
         TClientDataSet(dsTabela.DataSet).Insert;
end;



procedure Tfrm_CadastroBasico.acl_InserirUpdate(Sender: TObject);
begin
  acl_Inserir.Enabled := dsTabela.State in [dsBrowse,dsInactive];
end;



procedure Tfrm_CadastroBasico.acl_PesquisarExecute(Sender: TObject);
begin
  edt_Pesquisar.Clear;
  lbl_Atividade.Caption   := 'Pesquisa no Cadastro de Dizimistas';
  tbs_Cadastro.TabVisible := False;
  pgc_CadBasico.ActivePage := tbs_Pesquisar;
  edt_Pesquisar.SetFocus;
end;



procedure Tfrm_CadastroBasico.cbx_PesquisarClick(Sender: TObject);
begin
  edt_Pesquisar.SetFocus;
end;



procedure Tfrm_CadastroBasico.acl_GravarExecute(Sender: TObject);
begin

  try
    TClientDataSet(dsTabela.DataSet).Post;
    TClientDataSet(dsTabela.DataSet).ApplyUpdates(0);

    case iModo of
      0 : Application.MessageBox('Registro inserido com sucesso!','Informação',MB_OK+MB_ICONINFORMATION);
      1 : Application.MessageBox('Registro atualizado com sucesso!','Informação',MB_OK+MB_ICONINFORMATION);
    end;

    //Limpar os campos
    LimparTudo;
    TClientDataSet(dsTabela.DataSet).Open;
  except on E : Exception do
    raise Exception.Create('Erro ao Gravar registro: '+E.Message);
  end;
end;

procedure Tfrm_CadastroBasico.acl_GravarUpdate(Sender: TObject);
begin
  acl_Gravar.Enabled := dsTabela.State in [dsInsert,dsEdit];
end;



procedure Tfrm_CadastroBasico.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  TClientDataSet(dsTabela.DataSet).Cancel;
  TClientDataSet(dsTabela.DataSet).Close;
end;


//==========================//========================

procedure Tfrm_CadastroBasico.FormKeyPress(Sender: TObject; var Key: Char);
begin
  TabEnter(Self,Key);
end;



procedure Tfrm_CadastroBasico.DoAfterScroll(DataSet: TDataSet);
begin
  with TClientDataset(dsTabela.DataSet) do
  begin
    if not TClientDataset(dsTabela.DataSet).IsEmpty then
    begin                         Filter := GetkeyFiled+' = '+ FieldByName(GetQueryKeyFiled).AsString;
      Filtered := True;

      if not Active then Open;
      stb_CadBasico.Panels[3].Text := 'Total de Registros: '+IntToStr(RecordCount);
    end;
  end;
end;



procedure Tfrm_CadastroBasico.edt_PesquisarKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
  btn_Filtrar.Click;
end;

procedure Tfrm_CadastroBasico.app_CadBasicoHint(Sender: TObject);
begin
  stb_CadBasico.Panels[2].Text := '' + Application.Hint;
end;


procedure Tfrm_CadastroBasico.FormShow(Sender: TObject);
begin
  stb_CadBasico.Panels[1].Text := FormatDateTime(' dddd ", " dd " de " mmmm " de " yyyy',now);
  pgc_CadBasico.ActivePage := tbs_Pesquisar;
end;


procedure Tfrm_CadastroBasico.tmr_CadBasicoTimer(Sender: TObject);
begin
  stb_CadBasico.Panels[0].Text := ' ' + FormatDateTime(' hh:nn:ss', now);
end;



procedure Tfrm_CadastroBasico.SetExecutar(const Value: TExecutar);
begin
  FExecutar := Value;
  case Value of

    //Executa sentença SQL
    sentencaSQL:
    begin
      with TClientDataSet(dsTabela.DataSet) do
      begin
        Close;
        CommandText := '';
        CommandText := strSql;
        Open;
        First;
      end;
      if(TClientDataSet(dsTabela.DataSet).RecordCount = 0) then
      begin
          mensagem := 'Não foi encontrado nunhum registro que '+ #13
          +'satisfaça a sua pesquisa. ';
          Application.MessageBox(PChar(mensagem),'Informação',0+64);
      end;
    end;

    //Exibe os textos nos paineis da barra de status
    exibePanels:
    begin
      stb_CadBasico.Panels[3].Text := ' INC: ' + TClientDataSet(dsTabela.DataSet).FieldByName('DATALANCAMENTO').AsString;
      stb_CadBasico.Panels[4].Text := ' ALT: ' + TClientDataSet(dsTabela.DataSet).FieldByName('DATA_ALT').AsString;
      stb_CadBasico.Panels[5].Text := ' '      + TClientDataSet(dsTabela.DataSet).FieldByName('ID').AsString;

      if (TClientDataSet(dsTabela.DataSet).RecordCount = 0) then
      begin
        stb_CadBasico.Panels[3].Text := '';
        stb_CadBasico.Panels[4].Text := '';
        stb_CadBasico.Panels[5].Text := '';
      end;
    end;
  end;
end;


procedure Tfrm_CadastroBasico.LimparTudo;
var
  I: Integer;
begin
  for I := 0 to ComponentCount -1 do
  begin
    if Components[i] is TCustomEdit then
      TCustomEdit(Components[i]).Clear;
  end;

  if pgc_CadBasico.ActivePage = tbs_Cadastro then
  begin
    tbs_Cadastro.TabVisible := False;
    pgc_CadBasico.ActivePage := tbs_Pesquisar;
  end;

  edt_Pesquisar.SetFocus;
end;

   }





end.
