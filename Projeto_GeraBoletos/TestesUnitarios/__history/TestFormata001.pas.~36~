unit TestFormata001;

interface

uses
  TestFramework, GeraBoleto.Boleto;

type
  TestTFormata001 = class(TTestCase)

  strict private
    FBoleto: IBoleto;
  private
    procedure SetDadosPadrao;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    // os testes devem vir aqui
    procedure TestDigitoDoNumeroDoBancoInvalido;
    procedure TestFormatacaoDoNumeroDaAgengia;
    procedure TestFormatacaoNumeroDaConta;
    procedure TestFormatacaoCampoLivreParaConvenio4E6;

  end;

implementation

uses
  GeraBoleto.Conta, GeraBoleto.Titulo, System.SysUtils;

{ TestTFormata001 }

procedure TestTFormata001.SetUp;
begin
  FBoleto := TBoleto.Create;
  SetDadosPadrao;
end;

procedure TestTFormata001.TearDown;
begin
  // como FBoleto é do tipo interface, não é necessário destruir o objeto
end;

 procedure TestTFormata001.SetDadosPadrao;
var
  Conta: TConta;
  Titulo: TTitulo;
begin
  Conta := FBoleto.GetConta;
  Conta.Banco.Numero       := '001';
  Conta.Banco.DigitoNumero := '9';
  Conta.Agencia            := '9999';
  Conta.DigitoAgencia      := '9';
  Conta.Conta              := '123456';
  Conta.DigitoConta        := '1';
 // Conta.Convenio           := '123456';
 // Conta.SeqNossNumero      := 1;
  Conta.Carteira           :='17';

  Titulo := FBoleto.GetTitulo;
  Titulo.Emissao    := StrToDate('1/1/2019');
  Titulo.Vencto     := StrToDate('31/03/2020');
  Titulo.EspecMoeda := '9';
  Titulo.EspecDoc   := 'DM';
  Titulo.Aceite     := 'N';
  Titulo.DataProc   := StrToDate('1/1/2019');
  Titulo.Valor      := 300.00;
end;

procedure TestTFormata001.TestDigitoDoNumeroDoBancoInvalido;
begin
  StartExpectingException(Exception);
  FBoleto.GetConta.Banco.DigitoNumero := '8';
  FBoleto.Gerar;
  StopExpectingException('Nenhuma exceção gerada quando informado dígito do número do banco inválido');
end;

procedure TestTFormata001.TestFormatacaoCampoLivreParaConvenio4E6;
begin
  FBoleto.GetConta.SeqNossoNumero := 123;
  FBoleto.GetConta.Convenio       := '1234'; //convênio de 4 caracteres
  FBoleto.GetConta.Agencia        := '123';
  FBoleto.GetConta.Conta          := '1234';
  FBoleto.GetConta.Carteira       := '17';
  FBoleto.Gerar;
  CheckEquals('1234000012301230000123417', FBoleto.GetCampoLivre, +
            'Formatação do Campo Livre inválido para convênio com 4 dígitos!');

  FBoleto.GetConta.Convenio := '123456'; // convênio com 6 caracteres
  FBoleto.Gerar;
  CheckEquals('1234560012301230000123417', FBoleto.GetCampoLivre, +
            'Formatação do Campo Livre inválido para convênio com 6 dígitos!');
end;

procedure TestTFormata001.TestFormatacaoDoNumeroDaAgengia;
begin
  FBoleto.GetConta.Agencia := '123';
  FBoleto.Gerar;
  CheckEquals('0123', FBoleto.GetConta.Agencia, 'Número da Agência com formato inválido!');
end;

procedure TestTFormata001.TestFormatacaoNumeroDaConta;
begin
  FBoleto.GetConta.Conta := '12345';
  FBoleto.Gerar;
  CheckEquals('00012345', FBoleto.GetConta.Conta, 'Formatação do número da conta inválido!');
end;

initialization
  RegisterTest(TestTFormata001.Suite);

end.
