unit GeraBoleto.Base;

interface

uses
  GeraBoleto.Boleto, GeraBoleto.Conta, GeraBoleto.Titulo, GeraBoleto.Funcoes;
  // serão utilizados no TGeraBoletoBuilder

  const
    MOEDA = '9';

type

  IFormataCampoLivre = interface
    ['{6C97680F-D549-455A-B773-C0763BD5BB5C}']
    procedure Formata(Aboleto: IBoleto);
  end;

  IFormatacao = interface
  ['{FD86EA39-C7CC-4FF5-9B7F-CAB0C02FAD9A}']
    procedure FormataCamposConta;
    procedure ValidaDados;
    procedure FormataCampoLivre;
  end;

  IGeraBoletoBuilder = interface
 ['{B80D52EC-23C3-467C-B3FD-9D3A57FE10F4}']
    function FormataCampos: IGeraBoletoBuilder;
    function ValidaDados:   IGeraboletoBuilder;
    function FormataCampoLivre: IGeraboletoBuilder;
    function FormataCodigoBarras: IGeraboletoBuilder;
    function FormataLinhaDigitavel: IGeraboletoBuilder;
    function Criar: Boolean;
  end;

  TGeraBoletoBuilder = class(TInterfacedObject, IGeraBoletoBuilder)
  private
    FCampoLivre: string;
    FBoleto: IBoleto;
    FConta: TConta;
    FTitulo: TTitulo;
    FormatadorBanco: IFormatacao;
  public
    constructor Create(ABoleto: Iboleto);
    function FormataCampos: IGeraBoletoBuilder;
    function ValidaDados: IgeraBoletoBuilder;
    function FormataCampoLivre: IGeraBoletoBuilder;
    function FormataLinhaDigitavel: IGeraBoletoBuilder;
    function FormataCodigoBarras: IGeraBoletoBuilder;
    function Criar: Boolean;
  end;

implementation

uses
  GeraBoleto.Factories, System.SysUtils;

{ TGeraBoletoBuilder }

constructor TGeraBoletoBuilder.Create(ABoleto: Iboleto);
begin
  FBoleto := ABoleto;
  FConta  := FBoleto.GetConta;
  FTitulo := FBoleto.GetTitulo;
  FormatadorBanco := TFactoryBoleto.GetFormatter(ABoleto);
end;

function TGeraBoletoBuilder.Criar: Boolean;
begin
   Result := True; // TODO: a ser implementado
end;

function TGeraBoletoBuilder.FormataCampoLivre: IGeraBoletoBuilder;
begin
   FormatadorBanco.FormataCampoLivre;
   Result := Self;
end;

function TGeraBoletoBuilder.FormataCampos: IGeraBoletoBuilder;
begin
   FormatadorBanco.FormataCamposConta;
   Result := Self;
end;

function TGeraBoletoBuilder.FormataCodigoBarras: IGeraBoletoBuilder;
var
  CodigoBarras: string;
  DigitoCodBarra: string;
begin
  CodigoBarras := FConta.Banco.Numero + MOEDA + FatorVencimento(FTitulo.Vencto) +
    FormatFloat('0000000000', FTitulo.Valor * 100) + FBoleto.GetCampoLivre;
  DigitoCodBarra := CalcDigitoVerificadorCodBarras(CodigoBarras);
  Insert(DigitoCodBarra, CodigoBarras, 5);
  FBoleto.SetCodigoBarras(CodigoBarras);
   Result := Self;
end;

function TGeraBoletoBuilder.FormataLinhaDigitavel: IGeraBoletoBuilder;
begin
   Result := Self;
end;

function TGeraBoletoBuilder.ValidaDados: IgeraBoletoBuilder;
begin
   FormatadorBanco.ValidaDados;
   Result := Self;
end;

end.
